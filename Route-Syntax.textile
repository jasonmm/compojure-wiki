Compojure uses the following syntax for defining routes:

<pre>(http-method route-path bindings & body)</pre>

h3. http-method

A macro that matches a specific HTTP method. The following methods are implemented: @GET@, @POST@, @PUT@, @DELETE@ and @HEAD@. Additionally, the special method @ANY@ will match any HTTP method.

h3. route-path

A string that is used to match the URI using a routing syntax supported by "Clout":http://github.com/weavejester/clout. This may also be a expression that creates a string, or a compiled Clout route. Any parameters defined in the route-path are added to the request.

For example:

<pre>
(GET "/product/:id" [id]
   (find-product id))

(GET (str "/product" "/:id") [id]
  (find-product id))

(GET (clout/route-compile "/product/:id" {:id #"\d+"}) [id]
  (find-product id))
</pre>

h3. bindings

A map or vector of bindings that will be applied to the "Ring":http://github.com/mmcgrana/ring request map.

If the binding is a map, it acts like a normal destructuring binding to the whole request map. For example:

<pre>
(GET "/view-cookies" {cookies :cookies}
  (pr-str cookies))

(GET "/checkout" {{cart :shopping-cart} :session}
  (render-checkout cart))
</pre>

You can read more about destructuring bindings in the documentation for the Clojure "let form":http://clojure.org/special_forms#Special%20Forms--%28let%20%5Bbindings%2A%20%5D%20exprs%2A%29.

If the binding is a vector, the request parameters are bound to the symbols in the vector. If an @& more@ form is used, the map of parameters that have not been bound to a symbol are bound to @more@.

For example:

<pre>
(GET "/products/search" [query]
  (search-products query))

(POST "/users" [username email]
  (create-user username email))

(PUT "/user/:id" [id & updated-attrs]
  (update-user id updated-attrs))
</pre>

h3. body

The body of the route. The return value from this will be used to render the response. See: [[Response Rendering]]